service: xii-simposio-infra

plugins:
  - serverless-dynamodb-local
  - serverless-domain-manager

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: go1.x
  region: sa-east-1
  cfLogs: true
  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        Fn::GetAtt:
          - SubscribersTable
          - Arn
    -
      Effect: Allow
      Action:
        - ses:sendEmail
      Resource: '*'

# Define custom variables
custom:
  EDICION: 'xii'
  TABLE_NAME: ${self:custom.EDICION}-simposio-${self:provider.stage}-subscripciones
  EMAIL: carlos.a.frias@gmail.com
  USER_POOL_ARN: arn:aws:cognito-idp:us-east-1:188324601563:userpool/us-east-1_VQPMOouId
  customDomain:
    domainName: simposio.cfrias.com.ar
    basePath: api
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
  dynamodb:
    start:
      inMemory: true
      migrate: false
      seed: false
  # validatorRoleName: simposio-roles-validator
  # mailerRoleName: simposio-roles-mailer

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  validator:
    handler: bin/validator
    timeout: 30
    environment:
      TABLE_NAME: ${self:custom.TABLE_NAME}
    events:
      - http:
          path: /
          method: post
          cors: true

  mailer:
    handler: bin/mailer
    timeout: 60
    environment:
      EMAIL: ${self:custom.EMAIL}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - SubscribersTable
              - StreamArn
          batchSize: 1
  
  graphql:
    handler: bin/graphql
    timeout: 30
    events:
      - http:
          path: /graphql
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.USER_POOL_ARN}

# you can add CloudFormation resource templates here
resources:
  Resources:
    SubscribersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: documento
            AttributeType: 'N'
        KeySchema:
          - AttributeName: documento
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
